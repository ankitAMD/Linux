# SUDO and Root Questions 

### üîπ **Q1: What is the difference between the `root` user and a `sudo` user?**

**Answer:**

* The `root` user is the **primary administrative user** with unrestricted access to all files and commands. It is a *superuser*.
* A `sudo` user is a **non-root user** who has been granted temporary superuser privileges via the `sudo` command.
* `sudo` users must authenticate (typically by password), and their actions can be logged.
* This separation helps **minimize accidental or malicious use** of full system privileges.

---

### üîπ **Q2: What does the following line in the `/etc/sudoers` file mean?**

```bash
root    ALL=(ALL:ALL) ALL
%sudo   ALL=(ALL:ALL) ALL
```

**Answer:**

* `root    ALL=(ALL:ALL) ALL`: Grants the `root` user full privilege to run any command as any user or group on any host.
* `%sudo   ALL=(ALL:ALL) ALL`: Grants the **entire `sudo` group** the same full privileges.
* In effect, **any user added to the `sudo` group** has root-like capabilities using `sudo`, but with authentication and logging.

---

### üîπ **Q3: If root and sudo users can both do anything, what is the practical difference?**

**Answer:**

* **Control & Auditing**: Actions using `sudo` can be logged (`/var/log/auth.log`), while actions done directly as root may not.
* **Security**: You can grant a user permission to run only specific commands with `sudo`, unlike full root.
* **Authentication**: `sudo` typically requires a password, while root access (like `su`) may bypass that.
* Best practice is to **avoid using root directly** and prefer `sudo` for traceability and safety.

---

### üîπ **Q4: Why did the system not ask for a password when I ran `sudo su` or `sudo su -`?**

**Answer:**

* By default, `sudo` uses a **15-minute timestamp**:

  * If you run a sudo command, it caches your authentication for 15 minutes.
  * Any subsequent sudo command within that time won't ask for your password again.
* This is intended to improve usability but can be tuned or disabled for stricter environments.

---

### üîπ **Q5: Is it a security risk if I can switch to root without entering a password?**

**Answer:**

* Not necessarily, but you should **check the configuration**:

  * Look in `/etc/sudoers` or files under `/etc/sudoers.d/` for lines like:

    ```bash
    ravi ALL=(ALL) NOPASSWD: ALL
    ```
  * This allows the `ravi` user to run sudo commands without a password.
* For better security, you should:

  * Require password prompts.
  * Use logging.
  * Restrict commands using `sudo`.

---

### üîπ **Q6: Why can I `cd` into a directory without sudo, but `ls -la` requires sudo?**

**Answer:**

* Linux file permissions distinguish between different access types:

  * `cd` requires **execute (`x`) permission** on a directory.
  * `ls -la` requires **read (`r`) and execute (`x`) permissions**.
* If a directory allows execute but not read:

  * `cd` works ‚úÖ ‚Äî you can go in.
  * `ls` fails ‚ùå ‚Äî you can't view contents.
* Use `sudo` with `ls` only when needed, e.g., listing `/root/` or system-protected folders.

---

### üîπ **Q7: Once I become root using `sudo su` or `sudo -i`, can I do anything?**

**Answer:**

* Yes. After switching to root (shell prompt becomes `#`), you can:

  * Edit any file.
  * Restart services.
  * Modify system settings.
  * Add/remove users, etc.
* Use it cautiously. Unlike `sudo some-command`, full root shell won't log each action clearly unless command logging or auditing is enabled.

---

### üîπ **Q8: How to ensure sudo users are secure?**

**Best Practices:**

* **Use sudo for administrative actions** instead of logging in as root.
* **Set a password timeout** lower than 15 minutes in `/etc/sudoers`:

  ```bash
  Defaults timestamp_timeout=5
  ```
* **Avoid NOPASSWD** for most users.
* **Limit commands** if needed:

  ```bash
  ravi ALL=(ALL) /usr/sbin/service nginx restart
  ```
* **Monitor sudo access**:

  ```bash
  sudo grep 'sudo:' /var/log/auth.log
  ```

---

Let me know if you'd like a script to audit sudo privileges or set stricter timeout/security policies on your server.
